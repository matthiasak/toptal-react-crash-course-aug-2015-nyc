//
// HELPER CODE
//
// so I can inject
//
// - external scripts, and
// - CSS generated by Sass
//
// into the iframe on the right
//
const qs = (s, el) => (el || document).querySelector(s)
const loadScripts = (...urls) => Promise.all(
    urls.map(url => {
        let s = document.createElement('script')
        s.src = url
        document.body.appendChild(s)
        return new Promise((res,rej) => s.onload = res)
    })
)

const createStylesheet = () => {
    let style = document.createElement('style')
    Sass.compile(css, result => {
        style.textContent = result.text
        qs('head').appendChild(style)
    })
}

window.onload = loadScripts(
    'https://cdnjs.cloudflare.com/ajax/libs/react/0.13.3/react.min.js',
'https://medialize.github.io/sass.js/dist/sass.sync.js'
).then(_ => createStylesheet()).then(() => init()).catch(e => log(e))

const css = `
body {
    background: green;
    color: white;
    padding:1.5rem;
}
`

//
// END HELPER CODE - START APP
//

let init = function(){

    let {Component} = React

    class Clock extends Component {
        constructor(...p){
            super(...p)
            this.state = {
                time: new Date()
            }
        }
        _setTime() {
            let dommy = this.refs.dommy,
                node = React.findDOMNode(dommy)
            log(node.innerText+'')
            this.setState({ time: new Date })
        }
        componentDidMount(){
            this.interval = setInterval(() => this._setTime(), 1000)
        }
        // also
        // componentWillMount(){}

        componentDidUnmount(){
            clearInterval(this.interval)
        }
        // also
        // componentWillUnmount(){}

        render(){
            // by dynamically allowing components to be injected inside Clock
            // we create an "HOC" (a Higher Order Component)
            //
            // many awesome projects like React Router, React Resolver, React Motion, etc
            // are enabled by this ability

            return <div>
                <p ref="dommy">{this.props.message}</p>
                <p>time: { this.state.time.toTimeString() }</p>
                {this.props.children}
            </div>
        }
    }

    // log(<Clock message={'Coffee time after this!'} />, new Date)
    // React.render(
    //     <Clock>
    //         <p>Oh, did I sneak this in here?</p>
    //     </Clock>,
    // qs('body'))
}

